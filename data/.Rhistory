data <- read.csv("data/sp500.csv", header = TRUE)
data <- read.csv("../data/sp500.csv", header = TRUE)
setwd("/Users/julesmourgues/Documents/Cours/Master Dauphine/Paper GQ/measuring-market-inefficiency-conditional-correlation/data")
data <- read.csv("sp500.csv", header = TRUE)
setwd("/Users/julesmourgues/Documents/Cours/Master Dauphine/Paper GQ/measuring-market-inefficiency-conditional-correlation/data")
data <- read.csv("sp500.csv", header = TRUE)
data <- read.csv("sp500")
data <- read.csv("sp500.csv")
ts_data <- data$value
data <- read.csv("sp500.csv")
data <- read.csv("s&p500.csv")
ts_data <- data$value
ts_data
value
data
data <- read.csv("s&p500.csv")
ts_data <- data$s.p500
ts_data
ts_data <- log(data$s.p500)
data <- read.csv("s&p500.csv")
ts_data <- log(data$s.p500)
ts_data
library(pracma)
library(zoo)
# Define a function to extract the Hurst exponent using the "aggvar" method from hurstexp.
compute_hurst <- function(x) {
h_est <- hurstexp(x)
# 'aggvar' is one of the estimates; adjust if you prefer a different method.
return(h_est["aggvar"])
}
# Compute the rolling 10-day Hurst exponent using rollapply from the zoo package
rolling_hurst <- rollapply(ts_data,
width = 10,
FUN = compute_hurst,
by = 1,
align = "right",
fill = NA)
library(pracma)
library(zoo)
# Chargement des données
data <- read.csv("s&p500.csv", stringsAsFactors = FALSE)
# Convertir la colonne Date au format Date (adapter le format si nécessaire)
data$Date <- as.Date(data$Date, format = "%Y-%m-%d")
# Calcul du logarithme du S&P500
ts_data <- log(data$s.p500)
# Définir la fonction qui calcule l'exposant de Hurst avec la méthode de variance agrégée ("aggvar")
compute_hurst <- function(x) {
h_est <- hurstexp(x)
return(h_est["aggvar"])
}
# Calcul de l'exposant de Hurst sur une fenêtre glissante de 10 jours
rolling_hurst <- rollapply(ts_data,
width = 10,
FUN = compute_hurst,
by = 1,
align = "right",
fill = NA)
rolling_hurst
# Calcul du logarithme du S&P500
ts_data <- log(data$s.p500)
# Définir la fonction qui calcule l'exposant de Hurst avec la méthode de variance agrégée ("aggvar")
compute_hurst <- function(x) {
# On capture et supprime les affichages indésirables
h_est <- invisible(hurstexp(x))
# On extrait la méthode "aggvar" et on convertit en numérique pur
return(as.numeric(h_est["aggvar"]))
}
# Calcul du logarithme du S&P500
ts_data <- log(data$s.p500)
# Définir la fonction qui calcule l'exposant de Hurst avec la méthode de variance agrégée ("aggvar")
compute_hurst <- function(x) {
# On capture et supprime les affichages indésirables
h_est <- invisible(hurstexp(x))
# On extrait la méthode "aggvar" et on convertit en numérique pur
return(as.numeric(h_est["aggvar"]))
}
# Calcul de l'exposant de Hurst sur une fenêtre glissante de 10 jours
rolling_hurst <- rollapply(ts_data,
width = 10,
FUN = compute_hurst,
by = 1,
align = "right",
fill = NA)
# Définir la fonction qui calcule l'exposant de Hurst avec la méthode de variance agrégée ("aggvar")
compute_hurst <- function(x) {
h_est <- hurstexp(x)
# Extraire la valeur pour "aggvar" et la convertir en numérique pur
return(as.numeric(h_est["aggvar"]))
}
# Calcul de l'exposant de Hurst sur une fenêtre glissante de 10 jours
rolling_hurst <- rollapply(ts_data,
width = 10,
FUN = compute_hurst,
by = 1,
align = "right",
fill = NA)
# Calcul du logarithme du S&P500
ts_data <- log(data$s.p500)
# Définir la fonction qui calcule l'exposant de Hurst avec la méthode de variance agrégée ("aggvar")
compute_hurst <- function(x) {
h_est <- hurstexp(x)
# Extraire la valeur pour "aggvar" et la convertir en numérique pur
return(as.numeric(h_est["aggvar"]))
}
# Calcul de l'exposant de Hurst sur une fenêtre glissante de 10 jours
rolling_hurst <- rollapply(ts_data,
width = 10,
FUN = compute_hurst,
by = 1,
align = "right",
fill = NA)
# Calcul du logarithme du S&P500
ts_data <- log(as.numeric(as.character(data$s.p500)))
# Définir la fonction qui calcule l'exposant de Hurst avec la méthode de variance agrégée ("aggvar")
compute_hurst <- function(x) {
h_est <- hurstexp(x)
# Extraire la valeur pour "aggvar" et la convertir en numérique pur
return(as.numeric(h_est["aggvar"]))
}
# Calcul de l'exposant de Hurst sur une fenêtre glissante de 10 jours
rolling_hurst <- rollapply(ts_data,
width = 10,
FUN = compute_hurst,
by = 1,
align = "right",
fill = NA)
